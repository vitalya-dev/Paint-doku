!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	M,module	/modules/
!_TAG_KIND_DESCRIPTION!C++	P,partition	/partitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	C:/Users/Vitalya/Cloud/Paint-doku/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/dc0e4ad/
!_TAG_ROLE_DESCRIPTION!C++!header	exported	/exported with "exported imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!module	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!module	partOwner	/used for specifying a partition/
!_TAG_ROLE_DESCRIPTION!C++!partition	imported	/imported with "imported ..."/
BLACK	main.cpp	/^const SDL_Color BLACK = {0, 0, 0, 255};  \/\/ Default for empty or uncolored cells$/;"	v	typeref:typename:const SDL_Color
BLUE	main.cpp	/^const SDL_Color BLUE = {0, 0, 255, 255};$/;"	v	typeref:typename:const SDL_Color
CELL_SIZE	main.cpp	/^const int CELL_SIZE = 30;$/;"	v	typeref:typename:const int
Cell	main.cpp	/^struct Cell {$/;"	s	file:
GRAY	main.cpp	/^const SDL_Color GRAY = {128, 128, 128, 255};$/;"	v	typeref:typename:const SDL_Color
GREEN	main.cpp	/^const SDL_Color GREEN = {0, 255, 0, 255};$/;"	v	typeref:typename:const SDL_Color
GRID_SIZE	main.cpp	/^const int GRID_SIZE = 20;$/;"	v	typeref:typename:const int
MENU_BG_COLOR	main.cpp	/^const SDL_Color MENU_BG_COLOR = {200, 200, 200, 255};$/;"	v	typeref:typename:const SDL_Color
MENU_HOVER_COLOR	main.cpp	/^const SDL_Color MENU_HOVER_COLOR = {180, 180, 250, 255};$/;"	v	typeref:typename:const SDL_Color
MENU_ITEM_HEIGHT	main.cpp	/^const int MENU_ITEM_HEIGHT = 30;$/;"	v	typeref:typename:const int
MENU_WIDTH	main.cpp	/^const int MENU_WIDTH = 120;$/;"	v	typeref:typename:const int
M_PI	main.cpp	/^const double M_PI = 3.14159265358979323846;$/;"	v	typeref:typename:const double
MenuItem	main.cpp	/^struct MenuItem {$/;"	s	file:
ORANGE	main.cpp	/^const SDL_Color ORANGE = {255, 165, 0, 255};$/;"	v	typeref:typename:const SDL_Color
Particle	main.cpp	/^struct Particle {$/;"	s	file:
RED	main.cpp	/^const SDL_Color RED = {255, 0, 0, 255};$/;"	v	typeref:typename:const SDL_Color
WHITE	main.cpp	/^const SDL_Color WHITE = {255, 255, 255, 255};$/;"	v	typeref:typename:const SDL_Color
__anon3b5b11db0102	main.cpp	/^    auto loadTexture = [](const std::string& filePath) -> SDL_Texture* {$/;"	f	function:play_tutorial	typeref:typename:SDL_Texture *	file:
__anon3b5b11db0202	main.cpp	/^    auto renderTextAndImages = [&](const std::wstring& line, size_t displayCount, int lineIndex)/;"	f	function:play_tutorial	file:
__anon3b5b11db0302	main.cpp	/^    auto handleEvents = [&]() {$/;"	f	function:play_tutorial	file:
areParticlesActive	main.cpp	/^bool areParticlesActive() {$/;"	f	typeref:typename:bool
cleanup	main.cpp	/^void cleanup() {$/;"	f	typeref:typename:void
cleanupParticleSystem	main.cpp	/^void cleanupParticleSystem() {$/;"	f	typeref:typename:void
color	main.cpp	/^    SDL_Color color;$/;"	m	struct:MenuItem	typeref:typename:SDL_Color	file:
color	main.cpp	/^    SDL_Color color;$/;"	m	struct:Particle	typeref:typename:SDL_Color	file:
colorDistance	main.cpp	/^int colorDistance(SDL_Color color1, SDL_Color color2) {$/;"	f	typeref:typename:int
contextMenuItems	main.cpp	/^std::vector<MenuItem> contextMenuItems = {$/;"	v	typeref:typename:std::vector<MenuItem>
createCelebrationParticles	main.cpp	/^void createCelebrationParticles(int centerX, int centerY) {$/;"	f	typeref:typename:void
dx	main.cpp	/^    float dx, dy;$/;"	m	struct:Particle	typeref:typename:float	file:
dy	main.cpp	/^    float dx, dy;$/;"	m	struct:Particle	typeref:typename:float	file:
fill_color	main.cpp	/^    SDL_Color fill_color;$/;"	m	struct:Cell	typeref:typename:SDL_Color	file:
font	main.cpp	/^TTF_Font* font = nullptr;$/;"	v	typeref:typename:TTF_Font *
g_particles	main.cpp	/^std::vector<Particle> g_particles;$/;"	v	typeref:typename:std::vector<Particle>
g_rd	main.cpp	/^std::random_device g_rd;$/;"	v	typeref:typename:std::random_device
g_successSound	main.cpp	/^Mix_Chunk* g_successSound = nullptr;$/;"	v	typeref:typename:Mix_Chunk *
grid	main.cpp	/^Cell grid[GRID_SIZE][GRID_SIZE] = {$/;"	v	typeref:typename:Cell[][]
grid_to_hash	main.cpp	/^std::string grid_to_hash() {$/;"	f	typeref:typename:std::string
grid_to_string	main.cpp	/^std::string grid_to_string() {$/;"	f	typeref:typename:std::string
handleLeftClick	main.cpp	/^void handleLeftClick() {$/;"	f	typeref:typename:void
handleMouseClick	main.cpp	/^void handleMouseClick(SDL_Event* event) {$/;"	f	typeref:typename:void
handleRightClick	main.cpp	/^void handleRightClick() {$/;"	f	typeref:typename:void
init	main.cpp	/^bool init() {$/;"	f	typeref:typename:bool
initParticleSystem	main.cpp	/^void initParticleSystem() {$/;"	f	typeref:typename:void
invert_color	main.cpp	/^SDL_Color invert_color(SDL_Color color) {$/;"	f	typeref:typename:SDL_Color
is_grid_solved	main.cpp	/^bool is_grid_solved() {$/;"	f	typeref:typename:bool
label	main.cpp	/^    std::string label;$/;"	m	struct:MenuItem	typeref:typename:std::string	file:
lifetime	main.cpp	/^    float lifetime;$/;"	m	struct:Particle	typeref:typename:float	file:
main	main.cpp	/^int main(int argc, char* argv[]) {$/;"	f	typeref:typename:int
maxLifetime	main.cpp	/^    float maxLifetime;$/;"	m	struct:Particle	typeref:typename:float	file:
menuVisible	main.cpp	/^bool menuVisible = false;$/;"	v	typeref:typename:bool
menuX	main.cpp	/^int menuX = 0, menuY = 0;$/;"	v	typeref:typename:int
menuY	main.cpp	/^int menuX = 0, menuY = 0;$/;"	v	typeref:typename:int
mouseX	main.cpp	/^int mouseX = 0, mouseY = 0;$/;"	v	typeref:typename:int
mouseY	main.cpp	/^int mouseX = 0, mouseY = 0;$/;"	v	typeref:typename:int
number	main.cpp	/^    int number;$/;"	m	struct:Cell	typeref:typename:int	file:
number_color	main.cpp	/^    SDL_Color number_color;$/;"	m	struct:Cell	typeref:typename:SDL_Color	file:
play_celebration	main.cpp	/^void play_celebration() {$/;"	f	typeref:typename:void
play_game	main.cpp	/^void play_game() {$/;"	f	typeref:typename:void
play_tutorial	main.cpp	/^void play_tutorial() {$/;"	f	typeref:typename:void
quit	main.cpp	/^bool quit = false;$/;"	v	typeref:typename:bool
renderContextMenu	main.cpp	/^void renderContextMenu(SDL_Renderer* renderer, TTF_Font* font) {$/;"	f	typeref:typename:void
renderGrid	main.cpp	/^void renderGrid(SDL_Renderer* renderer, TTF_Font* font) {$/;"	f	typeref:typename:void
renderParticles	main.cpp	/^void renderParticles(SDL_Renderer* renderer) {$/;"	f	typeref:typename:void
renderText	main.cpp	/^void renderText(const std::string& text, int x, int y, SDL_Color color) {$/;"	f	typeref:typename:void
renderer	main.cpp	/^SDL_Renderer* renderer = nullptr;$/;"	v	typeref:typename:SDL_Renderer *
selectedColor	main.cpp	/^SDL_Color selectedColor = BLACK;$/;"	v	typeref:typename:SDL_Color
setCellColor	main.cpp	/^void setCellColor(int row, int col, SDL_Color color) {$/;"	f	typeref:typename:void
updateParticles	main.cpp	/^void updateParticles(float deltaTime) {$/;"	f	typeref:typename:void
utf8_to_wstring	main.cpp	/^std::wstring utf8_to_wstring(const std::string& utf8str) {$/;"	f	typeref:typename:std::wstring
window	main.cpp	/^SDL_Window* window = nullptr;$/;"	v	typeref:typename:SDL_Window *
wstring_to_utf8	main.cpp	/^std::string wstring_to_utf8(const std::wstring& wstr) {$/;"	f	typeref:typename:std::string
x	main.cpp	/^    float x, y;$/;"	m	struct:Particle	typeref:typename:float	file:
y	main.cpp	/^    float x, y;$/;"	m	struct:Particle	typeref:typename:float	file:
